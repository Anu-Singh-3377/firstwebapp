//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package controller;

import dao.UserDAO;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import model.User;

@WebServlet({"/"})
public class UserServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    UserDAO dao;

    public void init() {
        this.dao = new UserDAO();
    }

    public UserServlet() {
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            switch (action) {
                case "/update":
                    this.updateUser(request, response);
                    break;
                case "/new":
                    this.showNewForm(request, response);
                    break;
                case "/edit":
                    this.editUser(request, response);
                    break;
                case "/list":
                    this.listUser(request, response);
                    break;
                case "/view":
                    this.viewUser(request, response);
                    break;
                case "/loginprocess":
                    this.loginProcess(request, response);
                    break;
                case "/login":
                    this.login(request, response);
                    break;
                case "/delete":
                    this.deleteUser(request, response);
                    break;
                case "/insert":
                    this.insertUser(request, response);
                    break;
                case "/logout":
                    this.logout(request, response);
            }
        } catch (Exception var5) {
            Exception e = var5;
            System.out.println(e.getMessage());
        }

    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            this.doGet(request, response);
        } catch (ServletException var4) {
            ServletException e = var4;
            e.printStackTrace();
        } catch (IOException var5) {
            IOException e = var5;
            e.printStackTrace();
        }

    }

    public void listUser(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (this.isLoggedIn(request, response)) {
            List<User> users = this.dao.selectAllUsers();
            request.setAttribute("listuser", users);
            RequestDispatcher dispatcher = request.getRequestDispatcher("user-list.jsp");
            dispatcher.forward(request, response);
        } else {
            RequestDispatcher dispatcher = request.getRequestDispatcher("login.jsp");
            dispatcher.forward(request, response);
        }

    }

    public void showNewForm(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("user-form.jsp");
        dispatcher.forward(request, response);
    }

    public void insertUser(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String country = request.getParameter("country");
        String password = request.getParameter("password");
        User user = new User(name, email, country, password);
        this.dao.insertUser(user);
        response.sendRedirect("list");
    }

    public void login(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        RequestDispatcher dispatcher = request.getRequestDispatcher("login.jsp");
        dispatcher.forward(request, response);
    }

    public void loginProcess(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        UserDAO dao = new UserDAO();

        try {
            Throwable var22 = null;
            Object var7 = null;

            try {
                Connection connection = dao.getConnection();

                try {
                    PreparedStatement preparedStatement = connection.prepareStatement("select * from users where email=? and passwd=?");
                    preparedStatement.setString(1, email);
                    preparedStatement.setString(2, password);
                    ResultSet result = preparedStatement.executeQuery();
                    HttpSession httpSession;
                    RequestDispatcher dispatcher;
                    if (result.next()) {
                        httpSession = request.getSession();
                        httpSession.setAttribute("status", "active");
                        httpSession.setAttribute("email", email);
                        dispatcher = request.getRequestDispatcher("welcome.jsp");
                        dispatcher.forward(request, response);
                    } else {
                        httpSession = request.getSession();
                        httpSession.setAttribute("status", "Inactive");
                        dispatcher = request.getRequestDispatcher("login.jsp");
                        dispatcher.forward(request, response);
                    }
                } finally {
                    if (connection != null) {
                        connection.close();
                    }

                }
            } catch (Throwable var20) {
                if (var22 == null) {
                    var22 = var20;
                } else if (var22 != var20) {
                    var22.addSuppressed(var20);
                }

                throw var22;
            }
        } catch (Exception var21) {
            Exception e = var21;
            System.out.println(e.getMessage());
        }

    }

    public void logout(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession httpSession = request.getSession();
        httpSession.invalidate();
        RequestDispatcher dispatcher = request.getRequestDispatcher("login.jsp");
        dispatcher.forward(request, response);
    }

    public Boolean isLoggedIn(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession httpSession = request.getSession();
        return httpSession.getAttribute("status") != null ? true : false;
    }

    public void editUser(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        UserDAO dao = new UserDAO();

        try {
            Throwable var19 = null;
            Object var6 = null;

            try {
                Connection connection = dao.getConnection();

                try {
                    User user = dao.selectUser(id);
                    request.setAttribute("user", user);
                    RequestDispatcher dispatcher = request.getRequestDispatcher("edit.jsp");
                    dispatcher.forward(request, response);
                } finally {
                    if (connection != null) {
                        connection.close();
                    }

                }
            } catch (Throwable var17) {
                if (var19 == null) {
                    var19 = var17;
                } else if (var19 != var17) {
                    var19.addSuppressed(var17);
                }

                throw var19;
            }
        } catch (Exception var18) {
            Exception e = var18;
            System.out.println(e.getMessage());
        }

    }

    public void viewUser(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        UserDAO dao = new UserDAO();

        try {
            Throwable var19 = null;
            Object var6 = null;

            try {
                Connection connection = dao.getConnection();

                try {
                    User user = dao.selectUser(id);
                    request.setAttribute("user", user);
                    RequestDispatcher dispatcher = request.getRequestDispatcher("view.jsp");
                    dispatcher.forward(request, response);
                } finally {
                    if (connection != null) {
                        connection.close();
                    }

                }
            } catch (Throwable var17) {
                if (var19 == null) {
                    var19 = var17;
                } else if (var19 != var17) {
                    var19.addSuppressed(var17);
                }

                throw var19;
            }
        } catch (Exception var18) {
            Exception e = var18;
            System.out.println(e.getMessage());
        }

    }

    public void updateUser(HttpServletRequest request, HttpServletResponse response) {
        boolean status = false;
        int id = Integer.parseInt(request.getParameter("id"));
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String country = request.getParameter("country");
        UserDAO dao = new UserDAO();

        try {
            Throwable var22 = null;
            Object var10 = null;

            try {
                Connection connection = dao.getConnection();

                try {
                    User user = dao.selectUser(id);
                    user.setName(name);
                    user.setEmail(email);
                    user.setCountry(country);
                    System.out.println(user);
                    status = dao.updateUser(user);
                    System.out.println(status);
                    response.sendRedirect("list");
                } finally {
                    if (connection != null) {
                        connection.close();
                    }

                }
            } catch (Throwable var20) {
                if (var22 == null) {
                    var22 = var20;
                } else if (var22 != var20) {
                    var22.addSuppressed(var20);
                }

                throw var22;
            }
        } catch (Exception var21) {
            Exception e = var21;
            System.out.println(e.getMessage());
        }

    }

    public void deleteUser(HttpServletRequest request, HttpServletResponse response) {
        int id = Integer.parseInt(request.getParameter("id"));
        UserDAO dao = new UserDAO();

        try {
            Throwable var17 = null;
            Object var6 = null;

            try {
                Connection connection = dao.getConnection();

                try {
                    dao.deleteUser(id);
                    response.sendRedirect("list");
                } finally {
                    if (connection != null) {
                        connection.close();
                    }

                }
            } catch (Throwable var15) {
                if (var17 == null) {
                    var17 = var15;
                } else if (var17 != var15) {
                    var17.addSuppressed(var15);
                }

                throw var17;
            }
        } catch (Exception var16) {
            Exception e = var16;
            System.out.println(e.getMessage());
        }

    }
}
